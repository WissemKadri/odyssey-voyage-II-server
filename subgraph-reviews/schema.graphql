extend schema
  @link(
    url: "https://specs.apollo.dev/federation/v2.7"
    import: ["@key", "@override"]
  )

type Mutation {
  ### Reviews
  "Creates reviews for both host and listing for a particular booking - must be authored by guest of past booking"
  submitHostAndLocationReviews(
    bookingId: ID!
    hostReview: ReviewInput!
    locationReview: ReviewInput!
  ): SubmitHostAndLocationReviewsResponse! @override(from: "monolith")
  "Creates a review for the guest - must be authored by host of past booking"
  submitGuestReview(
    bookingId: ID!
    guestReview: ReviewInput!
  ): SubmitGuestReviewResponse! @override(from: "monolith")
}

interface MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
}

#### User accounts

"Represents an Airlock user's common properties"
interface User {
  id: ID!
}

"A host is a type of Airlock user. They own listings."
type Host implements User @key(fields: "id") {
  id: ID!
  "The overall calculated rating for the host"
  overallRating: Float @override(from: "monolith")
}

"A guest is a type of Airlock user. They book places to stay."
type Guest implements User @key(fields: "id") {
  id: ID!
}

### Listings

"A listing is a location owned by a host. A listing has a list of amenities it offers. Listings have a fixed cost per night value."
type Listing @key(fields: "id") {
  id: ID!
  "The overall calculated rating for a listing"
  overallRating: Float @override(from: "monolith")
}

### Reviews

"A review consists of a numerical rating and written text. It can be written by a host or a guest."
type Review @key(fields: "id") {
  id: ID!
  "Written comment the author has written about the review target"
  text: String! @override(from: "monolith")
  "User that wrote the review"
  author: User! @override(from: "monolith")
  "The numerical rating for the review target, on a scale of 1-5, with 5 being excellent."
  rating: Float! @override(from: "monolith")
}

"ReviewInput is the bare minimum needed to submit a review, not tied to any target."
input ReviewInput {
  text: String!
  rating: Float!
}

"The response after submitting reviews for both host and location together."
type SubmitHostAndLocationReviewsResponse implements MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int! @override(from: "monolith")
  "Indicates whether the mutation was successful"
  success: Boolean! @override(from: "monolith")
  "Human-readable message for the UI"
  message: String! @override(from: "monolith")
  "Newly created review about the host"
  hostReview: Review @override(from: "monolith")
  "Newly created review about the location"
  locationReview: Review @override(from: "monolith")
}

"The response after submitting reviews for a guest."
type SubmitGuestReviewResponse implements MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int! @override(from: "monolith")
  "Indicates whether the mutation was successful"
  success: Boolean! @override(from: "monolith")
  "Human-readable message for the UI"
  message: String! @override(from: "monolith")
  "Newly created review about the guest"
  guestReview: Review @override(from: "monolith")
}
